version: '3.8'

services:
  ambev.developerevaluation.webapi:
    container_name: ambev_developer_evaluation_webapi
    image: ${DOCKER_REGISTRY-}ambevdeveloperevaluationwebapi
    build:
      context: .
      dockerfile: src/Ambev.DeveloperEvaluation.WebApi/Dockerfile
      args:
        - BUILD_CONFIGURATION=Debug
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Host=ambev.developerevaluation.database;Database=DeveloperEvaluation;Username=postgres;Password=postgres
      - ConnectionStrings__MongoConnection=mongodb://developer:ev@luAt10n@ambev.developerevaluation.nosql:27017
      - ConnectionStrings__RedisConnection=ambev.developerevaluation.cache:6379,password=ev@luAt10n
    ports:
      - "5000:5000"
    depends_on:
      ambev.developerevaluation.database:
        condition: service_healthy
      ambev.developerevaluation.nosql:
        condition: service_healthy
      ambev.developerevaluation.cache:
        condition: service_healthy
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    networks:
      - ambev-network
    restart: unless-stopped

  ambev.developerevaluation.database:
    container_name: ambev_developer_evaluation_database
    image: postgres:16
    environment:
      POSTGRES_DB: DeveloperEvaluation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres 
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d DeveloperEvaluation"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ambev-network
    restart: unless-stopped

  ambev.developerevaluation.nosql:
    container_name: ambev_developer_evaluation_nosql 
    image: mongo:7.0    
    environment:
      MONGO_INITDB_ROOT_USERNAME: developer
      MONGO_INITDB_ROOT_PASSWORD: ev@luAt10n
    ports:
      - "63119:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ambev-network
    restart: unless-stopped

  ambev.developerevaluation.cache:
    container_name: ambev_developer_evaluation_cache 
    image: redis:7.2-alpine     
    command: redis-server --requirepass ev@luAt10n
    ports:
      - "63121:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "ev@luAt10n", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ambev-network
    restart: unless-stopped

networks:
  ambev-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data: